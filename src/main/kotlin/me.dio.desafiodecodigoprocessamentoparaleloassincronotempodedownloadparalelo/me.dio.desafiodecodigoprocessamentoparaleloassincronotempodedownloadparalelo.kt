// Desafio de C√≥digo: Processamento Paralelo/Ass√≠ncrono
// Tempo de Download Paralelo
// https://web.dio.me/coding/desafio-de-codigo-manipulacao-de-dados-assincronos/algorithm/tempo-de-download-paralelo?back=/track/desenvolvimento-backend-com-kotlin&tab=undefined&moduleId=undefined



/* Processamento Paralelo/Ass√≠ncrono
Tempo de Download Paralelo

Ô¢º Intermedi√°rio	        Ôù§ Estrutura de Dados

Descri√ß√£o
No mundo da programa√ß√£o, frequentemente enfrentamos situa√ß√µes onde m√∫ltiplas tarefas precisam ser executadas simultaneamente para otimizar o tempo de resposta ou processamento. Um exemplo comum √© o download de m√∫ltiplos arquivos da internet.

Para este desafio, suponha que voc√™ tenha uma lista de URLs que deseja "baixar". Seu objetivo √© simular o download desses arquivos de forma paralela e imprimir o tamanho de cada URL ap√≥s seu "download" ter sido disparado. Para simplificar, cada URL leva exatamente 1 segundo para ser "baixado".

Requisitos:

Defina uma lista de URLs que voc√™ deseja "baixar".
Crie uma fun√ß√£o para simular o "download" de uma URL. Essa fun√ß√£o deve aceitar uma URL como entrada e retornar o tamanho da URL.
Implemente uma l√≥gica que permita iniciar o "download" de v√°rias URLs em paralelo.
Imprima o tamanho de cada URL na ordem em que foram inseridas.

Entrada
A entrada consiste em uma lista de URLs, uma em cada linha. Uma linha vazia indica o fim da lista.

Sa√≠da
A sa√≠da deve mostrar o tamanho de cada URL na ordem em que foram inseridas, seguido pelo "Tempo total", que √© simplesmente a contagem de URLs (por mais conta-intuitivo que pare√ßa üòÅ):

Iniciando downloads...
Arq1: $tamanhoUrl1
Arq2: $tamanhoUrl2
Tempo total: $quantidadeDeUrls

Exemplos
A tabela abaixo apresenta exemplos com alguns dados de entrada e suas respectivas sa√≠das esperadas. Certifique-se de testar seu programa com esses exemplos e com outros casos poss√≠veis.

Entrada                                     Sa√≠da
https://chat.openai.com/                    Iniciando downloads...
https://www.invertexto.com/                 Arq1: 24
https://web.dio.me/                         Arq2: 27
[Linha vazia]                               Arq3: 19
                                            Tempo total: 3


https://www.netflix.com/                    Iniciando downloads...
https://www.hbomax.com/                     Arq1: 24
https://www.amazon.com.br/                  Arq2: 23
[Linha vazia]                               Arq3: 26
                                            Tempo total: 3


https://refactoring.guru/                   Iniciando downloads...
https://github.com/                         Arq1: 25
https://stackoverflow.com/                  Arq2: 19
[Linha vazia]                               Arq3: 26
                                            Tempo total: 3


Nota: A simula√ß√£o de download √© uma forma simplificada de entender como tarefas paralelas podem ser disparadas e como os resultados podem ser coletados de volta na ordem desejada.

*/


// Desafio de C√≥digo: Processamento Paralelo/Ass√≠ncrono
// Tempo de Download Paralelo
// https://web.dio.me/coding/desafio-de-codigo-manipulacao-de-dados-assincronos/algorithm/tempo-de-download-paralelo?back=/track/desenvolvimento-backend-com-kotlin&tab=undefined&moduleId=undefined


import kotlin.concurrent.thread

fun main() {
    val urls = mutableListOf<String>()

    while (true) {
        val input = readLine() ?: break
        if (input.isBlank()) break
        urls.add(input)
    }

    println("Iniciando downloads...")

    // Cria uma lista de Pair (indice, tamanho)
    val results = mutableListOf<Pair<Int, Int>>()

    // Em Kotlin, Coroutines s√£o uma op√ß√£o mais idiom√°tica e simples para opera√ß√µes ass√≠ncronas
    // e paralelas em compara√ß√£o com Threads. No entanto, nosso editor de c√≥digo atual
    // ainda n√£o suporta Coroutines. Para mais detalhes, veja a documenta√ß√£o oficial:
    // https://kotlinlang.org/docs/coroutines-overview.html

    val threads = urls.mapIndexed { index, url ->
        thread {
            val length = openLink(url)
            synchronized(results) {
                results.add(Pair(index, length))
            }
        }
    }

    threads.forEach { it.join() } // Aguarda at√© que todas as Threads terminem suas respectivas execu√ß√µes.

    // Ordena os resultados por √≠ndice para imprimir na ordem correta
    results.sortedBy { it.first }.forEachIndexed { idx, result ->
        println("Arq${idx + 1}: ${result.second}")
    }
    println("Tempo total: ${urls.size}")
}

// Simula a abertura de uma URL, retornando seu tamanho.
fun openLink(url: String): Int {
    // Simula√ß√£o do download da URL (substituir pela l√≥gica real de download se necess√°rio)
    Thread.sleep(1000) // Simula 1 segundo de download
    return url.length
}
